
; function: $figure-1a

; start LHS (in $figure-1a)
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
infer %2


; start LHS (in $figure-1a)
%0:i64 = var
%1:i64 = var
%2 = ne %0, %1
infer %2


; start LHS (in $figure-1a)
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i32 = zext %2
%4:i64 = var
%5 = ne %0, %4
%6:i32 = zext %5
%7 = and %3, %6
infer %7


; function: $figure-1b

; start LHS (in $figure-1b)
%0:i64 = var
%1:i64 = var
%2 = slt %0, %1
infer %2


; start LHS (in $figure-1b)
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i64 = var
%4 = slt %1, %3
pc %4 1:i1
infer %2


; start LHS (in $figure-1b)
%0:i64 = var
%1:i64 = var
%2 = ne %0, %1
%3:i64 = var
%4 = slt %3, %1
pc %4 1:i1
infer %2


; start LHS (in $figure-1b)
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i32 = zext %2
%4:i64 = var
%5 = ne %0, %4
%6:i32 = zext %5
%7 = and %3, %6
%8 = slt %1, %4
pc %8 1:i1
infer %7


; function: $figure-3-if

; start LHS (in $figure-3-if)
%0:i32 = var
%1 = and %0, 1:i32
infer %1


; start LHS (in $figure-3-if)
%0:i32 = var
%1 = add %0, 1:i32
%2 = and %0, 1:i32
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $figure-3-if)
%0:i32 = var
%1 = add %0, 2:i32
%2 = and %0, 1:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $figure-3-if)
%0 = block 2
%1:i32 = var
%2 = and %1, 1:i32
%3 = ne %2, 0:i32
blockpc %0 0 %3 1:i1
%4 = eq %2, 0:i32
blockpc %0 1 %4 1:i1
%5 = add %1, 1:i32
%6 = add %1, 2:i32
%7 = phi %0, %5, %6
infer %7


; start LHS (in $figure-3-if)
%0 = block 2
%1:i32 = var
%2 = and %1, 1:i32
%3 = ne %2, 0:i32
blockpc %0 0 %3 1:i1
%4 = eq %2, 0:i32
blockpc %0 1 %4 1:i1
%5 = add %1, 1:i32
%6 = add %1, 2:i32
%7 = phi %0, %5, %6
%8 = and %7, 1:i32
infer %8


; function: $flips

; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
infer %0


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
infer %0


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
infer %2


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
infer %2


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
%3:i32 = zext %2
%4 = sle 0:i32, %3
infer %4


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
%3:i32 = zext %2
%4 = sle 0:i32, %3
infer %4


; start LHS (in $flips)
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
%3:i32 = zext %2
%4 = sle 0:i32, %3
%5:i32 = zext %4
%6 = ule 0:i32, %5
infer %6


; function: $various-conditions-1

; start LHS (in $various-conditions-1)
%0:i32 = var
%1 = add %0, 1:i32
%2 = ne %0, 0:i32
pc %2 1:i1
infer %1


; function: $various-conditions-2

; start LHS (in $various-conditions-2)
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS (in $various-conditions-2)
%0:i32 = var
%1 = sub %0, 2:i32
%2 = slt %0, 0:i32
pc %2 1:i1
infer %1


; function: $various-conditions-3

; start LHS (in $various-conditions-3)
%0:i32 = var
%1 = sub %0, 4:i32
%2:i32 = var
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; function: $various-conditions-4

; function: $unaries

; start LHS (in $unaries)
%0:i32 = var
%1 = eq %0, 0:i32
infer %1


; start LHS (in $unaries)
%0:i32 = var
%1 = cttz %0
%2:i32 = var
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $unaries)
%0:i32 = var
%1 = ctlz %0
%2 = eq %0, 0:i32
pc %2 1:i1
infer %1


; start LHS (in $unaries)
%0:i32 = var
%1 = ctpop %0
%2:i32 = var
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS (in $unaries)
%0:i32 = var
%1 = ctlz %0
%2:i32 = var
%3 = ctpop %2
%4 = sub %1, %3
%5 = eq %0, 0:i32
pc %5 1:i1
infer %4


; start LHS (in $unaries)
%0:i32 = var
%1 = cttz %0
%2:i32 = var
%3 = ctlz %2
%4 = ctpop %0
%5 = sub %3, %4
%6 = add %1, %5
%7 = eq %2, 0:i32
pc %7 1:i1
infer %6


; function: $unary-condition

; start LHS (in $unary-condition)
%0:i32 = var
%1 = ule 1:i32, %0
infer %1


; start LHS (in $unary-condition)
%0:i32 = var
%1 = ule 1:i32, %0
%2:i32 = zext %1
%3 = cttz %2
infer %3


; start LHS (in $unary-condition)
%0:i32 = var
%1 = add %0, 2:i32
%2 = ule 1:i32, %0
%3:i32 = zext %2
%4 = cttz %3
%5 = ne %4, 0:i32
pc %5 1:i1
infer %1


; function: $unary-condition-2

; start LHS (in $unary-condition-2)
%0:i32 = var
%1 = ule 1:i32, %0
infer %1


; start LHS (in $unary-condition-2)
%0:i32 = var
%1 = ule 1:i32, %0
%2:i32 = zext %1
%3 = eq %2, 0:i32
infer %3


; start LHS (in $unary-condition-2)
%0:i32 = var
%1 = add %0, 2:i32
%2 = ule 1:i32, %0
%3:i32 = zext %2
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; function: $if-else-cond

; start LHS (in $if-else-cond)
%0:i32 = var
%1 = slt %0, 1:i32
infer %1


; start LHS (in $if-else-cond)
%0:i32 = var
%1 = add %0, 1:i32
%2 = slt %0, 1:i32
pc %2 1:i1
infer %1


; start LHS (in $if-else-cond)
%0:i32 = var
%1 = add %0, 2:i32
%2 = slt %0, 1:i32
%3:i32 = zext %2
%4 = eq %3, 0:i32
pc %4 1:i1
infer %1


; start LHS (in $if-else-cond)
%0 = block 2
%1:i32 = var
%2 = slt %1, 1:i32
blockpc %0 0 %2 1:i1
%3:i32 = zext %2
%4 = eq %3, 0:i32
blockpc %0 1 %4 1:i1
%5 = add %1, 1:i32
%6 = add %1, 2:i32
%7 = phi %0, %5, %6
infer %7


; start LHS (in $if-else-cond)
%0 = block 2
%1:i32 = var
%2 = slt %1, 1:i32
blockpc %0 0 %2 1:i1
%3:i32 = zext %2
%4 = eq %3, 0:i32
blockpc %0 1 %4 1:i1
%5 = add %1, 1:i32
%6 = add %1, 2:i32
%7 = phi %0, %5, %6
%8 = and %7, 1:i32
infer %8


; function: $trivial-ret

; start LHS (in $trivial-ret)
%0 = add 0:i32, 1:i32
infer %0


; function: $trivial-const

; function: $trivial-const-block

; function: $bad-phi-value

; start LHS (in $bad-phi-value)
%0 = block 2
%1 = ne 1:i32, 0:i32
blockpc %0 0 %1 1:i1
%2 = eq 1:i32, 0:i32
blockpc %0 1 %2 1:i1
%3:i32 = var
%4 = phi %0, %3, 0:i32
infer %4


; start LHS (in $bad-phi-value)
%0 = block 2
%1 = block 2
%2 = ne 1:i32, 0:i32
blockpc %1 0 %2 1:i1
%3 = eq 1:i32, 0:i32
blockpc %1 1 %3 1:i1
%4:i32 = var
%5 = phi %1, %4, 0:i32
%6 = ne %5, 0:i32
blockpc %0 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %0 1 %7 1:i1
%8 = phi %0, 0:i32, 1:i32
infer %8


; function: $bad-phi-value-2

; start LHS (in $bad-phi-value-2)
%0 = block 2
%1 = ne 1:i32, 0:i32
blockpc %0 0 %1 1:i1
%2 = eq 1:i32, 0:i32
blockpc %0 1 %2 1:i1
%3:i32 = var
%4 = phi %0, %3, 0:i32
infer %4


; start LHS (in $bad-phi-value-2)
%0 = block 2
%1 = block 2
%2 = ne 1:i32, 0:i32
blockpc %1 0 %2 1:i1
%3 = eq 1:i32, 0:i32
blockpc %1 1 %3 1:i1
%4:i32 = var
%5 = phi %1, %4, 0:i32
%6 = ne %5, 0:i32
blockpc %0 0 %6 1:i1
%7 = eq %5, 0:i32
blockpc %0 1 %7 1:i1
%8 = phi %0, 1:i32, 2:i32
infer %8


; function: $select

; start LHS (in $select)
%0 = ne 3:i32, 0:i32
%1 = select %0, 1:i32, 2:i32
infer %1


; function: $select-2

; start LHS (in $select-2)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $select-2)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $select-2)
%0:i32 = var
%1 = add 2:i32, %0
infer %1


; start LHS (in $select-2)
%0:i32 = var
%1 = add 2:i32, %0
%2 = ne %1, 0:i32
%3:i32 = var
%4 = add %3, %0
%5 = add %3, 1:i32
%6 = select %2, %4, %5
infer %6


; function: $block-phi-1

; start LHS (in $block-phi-1)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $block-phi-1)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $block-phi-1)
%0:i32 = var
%1 = add %0, 1:i32
%2 = add %1, 2:i32
infer %2


; start LHS (in $block-phi-1)
%0 = block 2
%1:i32 = var
%2 = add %1, 1:i32
%3 = add %2, 2:i32
%4 = phi %0, %2, %3
infer %4


; start LHS (in $block-phi-1)
%0 = block 2
%1:i32 = var
%2 = add %1, 1:i32
%3 = add %2, 2:i32
%4 = phi %0, %2, %3
%5 = add %4, 3:i32
infer %5


; function: $block-phi-2

; start LHS (in $block-phi-2)
%0 = block 2
%1 = phi %0, 1:i32, 2:i32
infer %1


; start LHS (in $block-phi-2)
%0 = block 2
%1 = phi %0, 1:i32, 2:i32
%2 = add %1, 3:i32
infer %2


; function: $zero_init-phi-bad_type

; function: $phi-bad-type

; function: $phi-one-side-i1

; start LHS (in $phi-one-side-i1)
%0:i32 = var
%1:i32 = var
%2 = sle %0, %1
infer %2


; start LHS (in $phi-one-side-i1)
%0:i32 = var
%1:i32 = var
%2 = eq %0, %1
%3 = sle %0, %1
pc %3 1:i1
infer %2


; start LHS (in $phi-one-side-i1)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3 = sle %0, %1
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %2


; start LHS (in $phi-one-side-i1)
%0 = block 2
%1:i32 = var
%2:i32 = var
%3 = sle %1, %2
blockpc %0 0 %3 1:i1
%4:i32 = zext %3
%5 = eq %4, 0:i32
blockpc %0 1 %5 1:i1
%6 = eq %1, %2
%7:i32 = zext %6
%8 = add %1, %2
%9 = phi %0, %7, %8
infer %9


; function: $call

; start LHS (in $call)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
infer %2


; start LHS (in $call)
%0:i32 = var
%1 = add 10:i32, %0
infer %1


; start LHS (in $call)
%0:i32 = var
%1:i32 = var
%2 = add %0, %1
%3:i32 = var
%4 = add 10:i32, %3
%5 = mul %2, %4
infer %5


; function: $in-unreachable-1

; function: $in-unreachable-2

; function: $in-unreachable-3

; function: $in-unreachable-4

; function: $in-unreachable-br_if

; start LHS (in $in-unreachable-br_if)
%0 = block 2
%1:i32 = var
%2 = ne %1, 0:i32
blockpc %0 0 %2 1:i1
%3 = eq %1, 0:i32
blockpc %0 1 %3 1:i1
%4 = phi %0, 1:i32, 2:i32
infer %4


; function: $in-unreachable-big

; function: $in-unreachable-operations

; function: $merge-with-one-less

; start LHS (in $merge-with-one-less)
%0 = block 2
%1:i32 = var
%2 = phi %0, %1, 8:i32
infer %2


; function: $deep

; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
infer %1


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
infer %1


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
infer %2


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
infer %2


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
infer %3


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
infer %3


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
infer %4


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
infer %4


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
infer %5


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
infer %5


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
infer %6


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
infer %6


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
infer %7


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
infer %7


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
%9 = xor %8, 1234:i32
infer %9


; start LHS (in $deep)
%0:i32 = var
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
%9 = xor %8, 1234:i32
infer %9


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = xor %0, 1234:i32
%1 = mul %0, 1234:i32
%2 = xor %1, 1234:i32
%3 = mul %2, 1234:i32
%4 = xor %3, 1234:i32
%5 = mul %4, 1234:i32
%6 = xor %5, 1234:i32
%7 = mul %6, 1234:i32
%8 = xor %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; start LHS (in $deep)
%0 = mul %0, 1234:i32
%1 = xor %0, 1234:i32
%2 = mul %1, 1234:i32
%3 = xor %2, 1234:i32
%4 = mul %3, 1234:i32
%5 = xor %4, 1234:i32
%6 = mul %5, 1234:i32
%7 = xor %6, 1234:i32
%8 = mul %7, 1234:i32
infer %8


; function: $two-pcs

; start LHS (in $two-pcs)
%0:i64 = var
%1:i64 = var
%2 = slt %0, %1
infer %2


; start LHS (in $two-pcs)
%0:i64 = var
%1 = eq %0, 0:i64
%2:i64 = var
%3 = slt %0, %2
pc %3 1:i1
infer %1


; start LHS (in $two-pcs)
%0:i64 = var
%1:i64 = var
%2 = add %0, %1
%3 = eq %0, 0:i64
%4 = slt %0, %1
pc %3 1:i1
pc %4 1:i1
infer %2


; start LHS (in $two-pcs)
%0:i64 = var
%1:i64 = var
%2 = sub %0, %1
%3 = eq %0, 0:i64
%4:i64 = zext %3
%5 = eq %4, 0:i64
%6 = slt %0, %1
pc %5 1:i1
pc %6 1:i1
infer %2


; start LHS (in $two-pcs)
%0:i64 = var
%1 = eq %0, 0:i64
%2:i64 = var
%3 = slt %2, %0
%4:i32 = zext %3
%5 = eq %4, 0:i32
pc %5 1:i1
infer %1


; start LHS (in $two-pcs)
%0:i64 = var
%1:i64 = var
%2 = mul %0, %1
%3 = eq %1, 0:i64
%4 = slt %0, %1
%5:i32 = zext %4
%6 = eq %5, 0:i32
pc %3 1:i1
pc %6 1:i1
infer %2


; start LHS (in $two-pcs)
%0:i64 = var
%1:i64 = var
%2 = sdiv %0, %1
%3 = eq %1, 0:i64
%4:i64 = zext %3
%5 = eq %4, 0:i64
%6 = slt %0, %1
%7:i32 = zext %6
%8 = eq %7, 0:i32
pc %5 1:i1
pc %8 1:i1
infer %2


; start LHS (in $two-pcs)
%0 = block 2
%1:i64 = var
%2:i64 = var
%3 = slt %1, %2
blockpc %0 0 %3 1:i1
%4:i32 = zext %3
%5 = eq %4, 0:i32
blockpc %0 1 %5 1:i1
%6 = block 2
%7 = eq %1, 0:i64
blockpc %6 0 %7 1:i1
%8:i64 = zext %7
%9 = eq %8, 0:i64
blockpc %6 1 %9 1:i1
%10 = add %1, %2
%11 = sub %1, %2
%12 = phi %6, %10, %11
%13 = block 2
%14 = eq %2, 0:i64
blockpc %13 0 %14 1:i1
%15:i64 = zext %14
%16 = eq %15, 0:i64
blockpc %13 1 %16 1:i1
%17 = mul %1, %2
%18 = sdiv %1, %2
%19 = phi %13, %17, %18
%20 = phi %0, %12, %19
infer %20


; function: $loop-1

; start LHS (in $loop-1)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $loop-1)
%0:i32 = var
%1 = add %0, 1:i32
%2 = add %1, 2:i32
infer %2


; start LHS (in $loop-1)
%0:i32 = var
%1 = add %0, 1:i32
%2 = add %1, 2:i32
infer %2


; function: $loop-2

; start LHS (in $loop-2)
%0:i32 = var
%1 = add %0, 1:i32
infer %1


; start LHS (in $loop-2)
%0:i32 = var
%1 = add %0, 1:i32
%2 = add %1, 2:i32
infer %2


; start LHS (in $loop-2)
%0:i32 = var
%1 = add %0, 1:i32
%2 = add %1, 2:i32
infer %2

(module
 (type $0 (func (param i64 i64 i64) (result i32)))
 (type $1 (func (param i32) (result i32)))
 (type $2 (func))
 (type $3 (func (param i32)))
 (type $4 (func (param i32 i32)))
 (type $5 (func (result i32)))
 (type $6 (func (param i32 i32) (result i32)))
 (type $7 (func (result f64)))
 (type $8 (func (param i32 i32 i32 i32)))
 (type $9 (func (param i64 i64 i64) (result i64)))
 (func $figure-1a (; 0 ;) (type $0) (param $a i64) (param $x i64) (param $y i64) (result i32)
  (local $i i32)
  (local $j i32)
  (local $r i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (block
   (set_local $6
    (get_local $a)
   )
   (set_local $7
    (get_local $x)
   )
   (nop)
   (nop)
   (nop)
   (set_local $9
    (get_local $a)
   )
   (set_local $10
    (get_local $y)
   )
   (nop)
   (nop)
   (nop)
   (set_local $12
    (i64.eq
     (get_local $6)
     (get_local $7)
    )
   )
   (set_local $13
    (i64.ne
     (get_local $9)
     (get_local $10)
    )
   )
   (nop)
   (nop)
   (nop)
   (set_local $15
    (i32.and
     (get_local $12)
     (get_local $13)
    )
   )
   (return
    (get_local $15)
   )
   (unreachable)
  )
  (set_local $17
   (get_local $16)
  )
  (return
   (get_local $17)
  )
 )
 (func $figure-1b (; 1 ;) (type $0) (param $a i64) (param $x i64) (param $y i64) (result i32)
  (local $i i32)
  (local $j i32)
  (local $r i32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i64)
  (local $13 i64)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (block
   (set_local $6
    (get_local $x)
   )
   (set_local $7
    (get_local $y)
   )
   (set_local $8
    (i64.lt_s
     (get_local $6)
     (get_local $7)
    )
   )
   (if
    (get_local $8)
    (block
     (block $block
      (set_local $9
       (get_local $a)
      )
      (set_local $10
       (get_local $x)
      )
      (nop)
      (nop)
      (nop)
      (set_local $12
       (get_local $a)
      )
      (set_local $13
       (get_local $y)
      )
      (nop)
      (nop)
      (nop)
      (set_local $15
       (i64.eq
        (get_local $9)
        (get_local $10)
       )
      )
      (set_local $16
       (i64.ne
        (get_local $12)
        (get_local $13)
       )
      )
      (nop)
      (nop)
      (nop)
      (set_local $18
       (i32.and
        (get_local $15)
        (get_local $16)
       )
      )
      (return
       (get_local $18)
      )
      (unreachable)
     )
     (unreachable)
    )
    (block
     (unreachable)
     (unreachable)
    )
   )
  )
  (unreachable)
 )
 (func $figure-3-if (; 2 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (block
   (block
    (set_local $1
     (get_local $x)
    )
    (set_local $2
     (i32.and
      (get_local $1)
      (i32.const 1)
     )
    )
    (if
     (get_local $2)
     (block
      (set_local $3
       (get_local $x)
      )
      (nop)
      (set_local $x
       (i32.add
        (get_local $3)
        (i32.const 1)
       )
      )
      (nop)
     )
     (block
      (set_local $5
       (get_local $x)
      )
      (nop)
      (set_local $x
       (i32.add
        (get_local $5)
        (i32.const 2)
       )
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $7
    (get_local $x)
   )
   (set_local $8
    (i32.and
     (get_local $7)
     (i32.const 1)
    )
   )
   (return
    (get_local $8)
   )
   (unreachable)
  )
  (set_local $10
   (get_local $9)
  )
  (return
   (get_local $10)
  )
 )
 (func $flips (; 3 ;) (type $2)
  (local $x i32)
  (local $y i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (block
   (set_local $2
    (get_local $x)
   )
   (set_local $3
    (get_local $y)
   )
   (nop)
   (set_local $x
    (i32.ge_s
     (get_local $2)
     (get_local $3)
    )
   )
   (nop)
   (set_local $5
    (get_local $x)
   )
   (set_local $6
    (get_local $y)
   )
   (nop)
   (set_local $x
    (i32.ge_u
     (get_local $5)
     (get_local $6)
    )
   )
   (nop)
   (set_local $8
    (get_local $x)
   )
   (set_local $9
    (get_local $y)
   )
   (nop)
   (set_local $x
    (i32.gt_s
     (get_local $8)
     (get_local $9)
    )
   )
   (nop)
   (set_local $11
    (get_local $x)
   )
   (set_local $12
    (get_local $y)
   )
   (nop)
   (set_local $x
    (i32.gt_u
     (get_local $11)
     (get_local $12)
    )
   )
   (nop)
  )
  (nop)
 )
 (func $various-conditions-1 (; 4 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (block
   (set_local $1
    (get_local $x)
   )
   (if
    (get_local $1)
    (block
     (set_local $2
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.add
       (get_local $2)
       (i32.const 1)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $various-conditions-2 (; 5 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (block
   (set_local $1
    (get_local $x)
   )
   (set_local $2
    (i32.lt_s
     (get_local $1)
     (i32.const 0)
    )
   )
   (if
    (get_local $2)
    (block
     (set_local $3
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.sub
       (get_local $3)
       (i32.const 2)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $various-conditions-3 (; 6 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (block
   (set_local $1
    (i32.reinterpret/f32
     (f32.const 0)
    )
   )
   (if
    (get_local $1)
    (block
     (set_local $2
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.sub
       (get_local $2)
       (i32.const 4)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $various-conditions-4 (; 7 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (block
   (unreachable)
   (if
    (unreachable)
    (block
     (set_local $1
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.add
       (get_local $1)
       (i32.const 3)
      )
     )
     (nop)
    )
   )
  )
  (unreachable)
 )
 (func $unaries (; 8 ;) (type $4) (param $x i32) (param $y i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (block
   (set_local $2
    (get_local $x)
   )
   (set_local $3
    (i32.eqz
     (get_local $2)
    )
   )
   (if
    (get_local $3)
    (block
     (set_local $4
      (get_local $y)
     )
     (set_local $5
      (i32.ctz
       (get_local $4)
      )
     )
     (set_local $6
      (get_local $x)
     )
     (set_local $7
      (i32.clz
       (get_local $6)
      )
     )
     (set_local $8
      (get_local $y)
     )
     (set_local $9
      (i32.popcnt
       (get_local $8)
      )
     )
     (set_local $10
      (i32.sub
       (get_local $7)
       (get_local $9)
      )
     )
     (nop)
     (set_local $x
      (i32.add
       (get_local $5)
       (get_local $10)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $unary-condition (; 9 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (block
   (set_local $1
    (get_local $x)
   )
   (set_local $2
    (i32.gt_u
     (get_local $1)
     (i32.const 1)
    )
   )
   (set_local $3
    (i32.ctz
     (get_local $2)
    )
   )
   (if
    (get_local $3)
    (block
     (set_local $4
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.add
       (get_local $4)
       (i32.const 2)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $unary-condition-2 (; 10 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (block
   (set_local $1
    (get_local $x)
   )
   (set_local $2
    (i32.gt_u
     (get_local $1)
     (i32.const 1)
    )
   )
   (set_local $3
    (i32.eqz
     (get_local $2)
    )
   )
   (if
    (get_local $3)
    (block
     (set_local $4
      (get_local $x)
     )
     (nop)
     (set_local $x
      (i32.add
       (get_local $4)
       (i32.const 2)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $if-else-cond (; 11 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (block
   (block
    (set_local $1
     (get_local $x)
    )
    (set_local $2
     (i32.lt_s
      (get_local $1)
      (i32.const 1)
     )
    )
    (if
     (get_local $2)
     (block
      (set_local $3
       (get_local $x)
      )
      (nop)
      (set_local $x
       (i32.add
        (get_local $3)
        (i32.const 1)
       )
      )
      (nop)
     )
     (block
      (set_local $5
       (get_local $x)
      )
      (nop)
      (set_local $x
       (i32.add
        (get_local $5)
        (i32.const 2)
       )
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $7
    (get_local $x)
   )
   (set_local $8
    (i32.and
     (get_local $7)
     (i32.const 1)
    )
   )
   (return
    (get_local $8)
   )
   (unreachable)
  )
  (set_local $10
   (get_local $9)
  )
  (return
   (get_local $10)
  )
 )
 (func $trivial-ret (; 12 ;) (type $5) (result i32)
  (local $0 i32)
  (set_local $0
   (i32.add
    (i32.const 0)
    (i32.const 1)
   )
  )
  (return
   (get_local $0)
  )
 )
 (func $trivial-const (; 13 ;) (type $5) (result i32)
  (return
   (i32.const 0)
  )
 )
 (func $trivial-const-block (; 14 ;) (type $5) (result i32)
  (local $0 i32)
  (local $1 i32)
  (block
   (nop)
   (nop)
  )
  (set_local $1
   (i32.const 0)
  )
  (return
   (get_local $1)
  )
 )
 (func $bad-phi-value (; 15 ;) (type $5) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (block
   (if
    (i32.const 1)
    (block
     (nop)
     (set_local $1
      (i32.load
       (i32.const 0)
      )
     )
    )
    (set_local $1
     (i32.const 0)
    )
   )
   (set_local $2
    (get_local $1)
   )
   (if
    (get_local $2)
    (set_local $3
     (i32.const 0)
    )
    (set_local $3
     (i32.const 1)
    )
   )
  )
  (set_local $4
   (get_local $3)
  )
  (return
   (get_local $4)
  )
 )
 (func $bad-phi-value-2 (; 16 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block
    (if
     (i32.const 1)
     (block
      (nop)
      (set_local $2
       (i32.load
        (i32.const 0)
       )
      )
     )
     (set_local $2
      (i32.const 0)
     )
    )
    (set_local $3
     (get_local $2)
    )
    (if
     (get_local $3)
     (block
      (set_local $x
       (i32.const 1)
      )
      (nop)
     )
     (block
      (set_local $x
       (i32.const 2)
      )
      (nop)
     )
    )
   )
   (nop)
   (nop)
   (nop)
  )
  (set_local $6
   (get_local $x)
  )
  (return
   (get_local $6)
  )
 )
 (func $select (; 17 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (set_local $1
   (select
    (i32.const 1)
    (i32.const 2)
    (i32.const 3)
   )
  )
  (return
   (get_local $1)
  )
  (unreachable)
 )
 (func $select-2 (; 18 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (set_local $2
   (get_local $x)
  )
  (set_local $3
   (get_local $y)
  )
  (set_local $4
   (i32.add
    (get_local $2)
    (get_local $3)
   )
  )
  (set_local $5
   (get_local $x)
  )
  (set_local $6
   (i32.add
    (get_local $5)
    (i32.const 1)
   )
  )
  (set_local $7
   (get_local $y)
  )
  (set_local $8
   (i32.add
    (i32.const 2)
    (get_local $7)
   )
  )
  (set_local $9
   (select
    (get_local $4)
    (get_local $6)
    (get_local $8)
   )
  )
  (return
   (get_local $9)
  )
  (unreachable)
 )
 (func $block-phi-1 (; 19 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (block
   (block $out
    (set_local $2
     (get_local $x)
    )
    (nop)
    (set_local $x
     (i32.add
      (get_local $2)
      (i32.const 1)
     )
    )
    (nop)
    (set_local $4
     (get_local $y)
    )
    (br_if $out
     (get_local $4)
    )
    (nop)
    (set_local $5
     (get_local $x)
    )
    (nop)
    (set_local $x
     (i32.add
      (get_local $5)
      (i32.const 2)
     )
    )
    (nop)
   )
   (nop)
   (set_local $7
    (get_local $x)
   )
   (nop)
   (nop)
  )
  (set_local $10
   (i32.add
    (get_local $7)
    (i32.const 3)
   )
  )
  (return
   (get_local $10)
  )
 )
 (func $block-phi-2 (; 20 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block $out
    (set_local $x
     (i32.const 1)
    )
    (nop)
    (set_local $2
     (get_local $y)
    )
    (br_if $out
     (get_local $2)
    )
    (nop)
    (set_local $x
     (i32.const 2)
    )
    (nop)
   )
   (nop)
   (set_local $3
    (get_local $x)
   )
   (nop)
   (nop)
  )
  (set_local $6
   (i32.add
    (get_local $3)
    (i32.const 3)
   )
  )
  (return
   (get_local $6)
  )
 )
 (func $zero_init-phi-bad_type (; 21 ;) (type $7) (result f64)
  (local $x f64)
  (local $1 f64)
  (local $2 f64)
  (local $3 f64)
  (block
   (if
    (i32.const 0)
    (block
     (set_local $x
      (f64.const 1)
     )
     (nop)
    )
   )
   (nop)
   (nop)
   (nop)
  )
  (set_local $3
   (get_local $x)
  )
  (return
   (get_local $3)
  )
 )
 (func $phi-bad-type (; 22 ;) (type $7) (result f64)
  (local $0 f64)
  (local $1 f64)
  (local $2 f64)
  (local $3 f64)
  (block $label$1
   (if
    (i32.const 0)
    (set_local $0
     (f64.const 0)
    )
    (set_local $0
     (f64.const 1)
    )
   )
   (nop)
   (nop)
  )
  (set_local $3
   (get_local $0)
  )
  (return
   (get_local $3)
  )
 )
 (func $phi-one-side-i1 (; 23 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $i i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (block
   (block
    (set_local $3
     (get_local $x)
    )
    (set_local $4
     (get_local $y)
    )
    (set_local $5
     (i32.le_s
      (get_local $3)
      (get_local $4)
     )
    )
    (if
     (get_local $5)
     (block
      (set_local $6
       (get_local $x)
      )
      (set_local $7
       (get_local $y)
      )
      (nop)
      (set_local $i
       (i32.eq
        (get_local $6)
        (get_local $7)
       )
      )
      (nop)
     )
     (block
      (set_local $9
       (get_local $x)
      )
      (set_local $10
       (get_local $y)
      )
      (nop)
      (set_local $i
       (i32.add
        (get_local $9)
        (get_local $10)
       )
      )
      (nop)
     )
    )
   )
   (nop)
   (nop)
   (nop)
  )
  (set_local $14
   (get_local $i)
  )
  (return
   (get_local $14)
  )
 )
 (func $call (; 24 ;) (type $5) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (set_local $0
   (call $call)
  )
  (set_local $1
   (call $call)
  )
  (set_local $2
   (i32.add
    (get_local $0)
    (get_local $1)
   )
  )
  (set_local $3
   (call $call)
  )
  (set_local $4
   (i32.add
    (i32.const 10)
    (get_local $3)
   )
  )
  (set_local $5
   (i32.mul
    (get_local $2)
    (get_local $4)
   )
  )
  (return
   (get_local $5)
  )
  (unreachable)
 )
 (func $in-unreachable-1 (; 25 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block
    (set_local $2
     (get_local $x)
    )
    (if
     (get_local $2)
     (block
      (block $block
       (set_local $x
        (i32.const 1)
       )
       (nop)
       (set_local $3
        (get_local $x)
       )
       (return
        (get_local $3)
       )
       (unreachable)
      )
      (unreachable)
     )
     (block
      (set_local $x
       (i32.const 2)
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $4
    (get_local $x)
   )
   (return
    (get_local $4)
   )
   (unreachable)
  )
  (set_local $6
   (get_local $5)
  )
  (return
   (get_local $6)
  )
 )
 (func $in-unreachable-2 (; 26 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (block
   (block
    (set_local $2
     (get_local $x)
    )
    (if
     (get_local $2)
     (block
      (block $block
       (set_local $x
        (i32.const 1)
       )
       (nop)
       (unreachable)
       (unreachable)
      )
      (unreachable)
     )
     (block
      (set_local $x
       (i32.const 2)
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $3
    (get_local $x)
   )
   (return
    (get_local $3)
   )
   (unreachable)
  )
  (set_local $5
   (get_local $4)
  )
  (return
   (get_local $5)
  )
 )
 (func $in-unreachable-3 (; 27 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block $out
    (block
     (set_local $2
      (get_local $x)
     )
     (if
      (get_local $2)
      (block
       (block $block
        (set_local $x
         (i32.const 1)
        )
        (nop)
        (br $out)
        (unreachable)
       )
       (unreachable)
      )
      (block
       (set_local $x
        (i32.const 2)
       )
       (nop)
      )
     )
    )
    (nop)
    (set_local $3
     (get_local $x)
    )
    (return
     (get_local $3)
    )
    (unreachable)
   )
   (nop)
   (set_local $4
    (get_local $x)
   )
   (return
    (get_local $4)
   )
   (unreachable)
  )
  (set_local $6
   (get_local $5)
  )
  (return
   (get_local $6)
  )
 )
 (func $in-unreachable-4 (; 28 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block $out
    (block
     (set_local $2
      (get_local $x)
     )
     (if
      (get_local $2)
      (block
       (block $block
        (set_local $x
         (i32.const 1)
        )
        (nop)
        (br_table $out $out $out
         (i32.const 1)
        )
        (unreachable)
       )
       (unreachable)
      )
      (block
       (set_local $x
        (i32.const 2)
       )
       (nop)
      )
     )
    )
    (nop)
    (set_local $3
     (get_local $x)
    )
    (return
     (get_local $3)
    )
    (unreachable)
   )
   (nop)
   (set_local $4
    (get_local $x)
   )
   (return
    (get_local $4)
   )
   (unreachable)
  )
  (set_local $6
   (get_local $5)
  )
  (return
   (get_local $6)
  )
 )
 (func $in-unreachable-br_if (; 29 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (block
   (block $out
    (block
     (set_local $2
      (get_local $x)
     )
     (if
      (get_local $2)
      (block
       (block $block
        (set_local $x
         (i32.const 1)
        )
        (nop)
        (set_local $3
         (get_local $x)
        )
        (br_if $out
         (get_local $3)
        )
        (nop)
       )
       (nop)
      )
      (block
       (set_local $x
        (i32.const 2)
       )
       (nop)
      )
     )
    )
    (nop)
    (set_local $4
     (get_local $x)
    )
    (return
     (get_local $4)
    )
    (unreachable)
   )
   (nop)
   (set_local $5
    (get_local $x)
   )
   (return
    (get_local $5)
   )
   (unreachable)
  )
  (set_local $7
   (get_local $6)
  )
  (return
   (get_local $7)
  )
 )
 (func $in-unreachable-big (; 30 ;) (type $8) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (block
   (block $label$1
    (block $label$2
     (block $label$3
      (block
       (set_local $4
        (get_local $2)
       )
       (if
        (get_local $4)
        (block
         (block
          (set_local $5
           (get_local $0)
          )
          (if
           (get_local $5)
           (block
            (block $block
             (set_local $1
              (i32.const -8531)
             )
             (nop)
             (br $label$3)
             (unreachable)
            )
            (unreachable)
           )
           (block
            (block $block3
             (set_local $1
              (i32.const -8531)
             )
             (nop)
             (br $label$1)
             (unreachable)
            )
            (unreachable)
           )
          )
         )
         (unreachable)
        )
       )
      )
      (nop)
      (br $label$2)
      (unreachable)
     )
     (nop)
     (set_local $6
      (i32.load
       (i32.const 0)
      )
     )
     (drop
      (get_local $6)
     )
     (nop)
     (br $label$1)
     (unreachable)
    )
    (nop)
    (set_local $7
     (get_local $1)
    )
    (i32.store16
     (i32.const 1)
     (get_local $7)
    )
    (nop)
    (unreachable)
    (unreachable)
   )
   (nop)
   (i32.store16
    (i32.const 0)
    (i32.const -8531)
   )
   (nop)
  )
  (nop)
 )
 (func $in-unreachable-operations (; 31 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (block $block
   (unreachable)
   (unreachable)
   (block
    (set_local $2
     (get_local $x)
    )
    (if
     (get_local $2)
     (block
      (set_local $x
       (i32.const 1)
      )
      (nop)
     )
     (block
      (set_local $x
       (i32.const 2)
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $3
    (get_local $x)
   )
   (return
    (get_local $3)
   )
   (unreachable)
  )
  (unreachable)
 )
 (func $merge-with-one-less (; 32 ;) (type $1) (param $var$0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (block
   (block $label$1
    (block $label$2
     (block $label$3
      (block $label$4
       (block $label$5
        (set_local $1
         (i32.load
          (i32.const 1)
         )
        )
        (br_table $label$5 $label$4 $label$3 $label$2
         (get_local $1)
        )
        (unreachable)
       )
       (nop)
       (unreachable)
       (unreachable)
      )
      (nop)
      (br $label$1)
      (unreachable)
     )
     (nop)
     (set_local $var$0
      (i32.const 8)
     )
     (set_local $2
      (get_local $var$0)
     )
     (set_local $3
      (i32.load
       (get_local $2)
      )
     )
     (f64.store
      (get_local $3)
      (f64.const 0)
     )
     (nop)
     (br $label$1)
     (unreachable)
    )
    (nop)
    (unreachable)
    (unreachable)
   )
   (nop)
   (set_local $4
    (get_local $var$0)
   )
   (i32.store
    (get_local $4)
    (i32.const 16)
   )
   (nop)
   (nop)
  )
  (set_local $6
   (i32.const 1)
  )
  (return
   (get_local $6)
  )
 )
 (func $deep (; 33 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  (local $41 i32)
  (local $42 i32)
  (local $43 i32)
  (local $44 i32)
  (local $45 i32)
  (local $46 i32)
  (local $47 i32)
  (local $48 i32)
  (local $49 i32)
  (local $50 i32)
  (local $51 i32)
  (local $52 i32)
  (local $53 i32)
  (local $54 i32)
  (local $55 i32)
  (block
   (set_local $1
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $1)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $3
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $3)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $5
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $5)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $7
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $7)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $9
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $9)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $11
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $11)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $13
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $13)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $15
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $15)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $17
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $17)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $19
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $19)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $21
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $21)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $23
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $23)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $25
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $25)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $27
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $27)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $29
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $29)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $31
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $31)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $33
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $33)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $35
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $35)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $37
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $37)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $39
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $39)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $41
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $41)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $43
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $43)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $45
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $45)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $47
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $47)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $49
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.xor
     (get_local $49)
     (i32.const 1234)
    )
   )
   (nop)
   (set_local $51
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.mul
     (get_local $51)
     (i32.const 1234)
    )
   )
   (nop)
   (nop)
   (nop)
  )
  (set_local $55
   (get_local $x)
  )
  (return
   (get_local $55)
  )
 )
 (func $two-pcs (; 34 ;) (type $9) (param $x i64) (param $y i64) (param $t i64) (result i64)
  (local $3 i64)
  (local $4 i64)
  (local $5 i32)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  (local $9 i64)
  (local $10 i64)
  (local $11 i64)
  (local $12 i64)
  (local $13 i64)
  (local $14 i64)
  (local $15 i32)
  (local $16 i64)
  (local $17 i64)
  (local $18 i64)
  (local $19 i64)
  (local $20 i64)
  (local $21 i64)
  (local $22 i64)
  (local $23 i64)
  (local $24 i64)
  (block
   (block
    (set_local $3
     (get_local $x)
    )
    (set_local $4
     (get_local $y)
    )
    (set_local $5
     (i64.lt_s
      (get_local $3)
      (get_local $4)
     )
    )
    (if
     (get_local $5)
     (block
      (block
       (set_local $6
        (get_local $x)
       )
       (set_local $7
        (i64.eqz
         (get_local $6)
        )
       )
       (if
        (get_local $7)
        (block
         (set_local $8
          (get_local $x)
         )
         (set_local $9
          (get_local $y)
         )
         (nop)
         (set_local $t
          (i64.add
           (get_local $8)
           (get_local $9)
          )
         )
         (nop)
        )
        (block
         (set_local $11
          (get_local $x)
         )
         (set_local $12
          (get_local $y)
         )
         (nop)
         (set_local $t
          (i64.sub
           (get_local $11)
           (get_local $12)
          )
         )
         (nop)
        )
       )
      )
      (nop)
     )
     (block
      (block
       (set_local $14
        (get_local $y)
       )
       (set_local $15
        (i64.eqz
         (get_local $14)
        )
       )
       (if
        (get_local $15)
        (block
         (set_local $16
          (get_local $x)
         )
         (set_local $17
          (get_local $y)
         )
         (nop)
         (set_local $t
          (i64.mul
           (get_local $16)
           (get_local $17)
          )
         )
         (nop)
        )
        (block
         (set_local $19
          (get_local $x)
         )
         (set_local $20
          (get_local $y)
         )
         (nop)
         (set_local $t
          (i64.div_s
           (get_local $19)
           (get_local $20)
          )
         )
         (nop)
        )
       )
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $22
    (get_local $t)
   )
   (return
    (get_local $22)
   )
   (unreachable)
  )
  (set_local $24
   (get_local $23)
  )
  (return
   (get_local $24)
  )
 )
 (func $loop-1 (; 35 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (block
   (set_local $2
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.add
     (get_local $2)
     (i32.const 1)
    )
   )
   (nop)
   (loop $loop-in
    (set_local $4
     (get_local $x)
    )
    (nop)
    (set_local $x
     (i32.add
      (get_local $4)
      (i32.const 2)
     )
    )
    (nop)
   )
   (nop)
   (set_local $6
    (get_local $x)
   )
   (return
    (get_local $6)
   )
   (unreachable)
  )
  (set_local $8
   (get_local $7)
  )
  (return
   (get_local $8)
  )
 )
 (func $loop-2 (; 36 ;) (type $6) (param $x i32) (param $y i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (block
   (set_local $2
    (get_local $x)
   )
   (nop)
   (set_local $x
    (i32.add
     (get_local $2)
     (i32.const 1)
    )
   )
   (nop)
   (loop $loopy
    (set_local $4
     (get_local $x)
    )
    (nop)
    (set_local $x
     (i32.add
      (get_local $4)
      (i32.const 2)
     )
    )
    (nop)
   )
   (nop)
   (set_local $6
    (get_local $x)
   )
   (return
    (get_local $6)
   )
   (unreachable)
  )
  (set_local $8
   (get_local $7)
  )
  (return
   (get_local $8)
  )
 )
)
