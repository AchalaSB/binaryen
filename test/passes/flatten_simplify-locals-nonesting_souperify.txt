
; function: $figure-1a

; start LHS
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
infer %2


; start LHS
%0:i64 = var
%1:i64 = var
%2 = ne %0, %1
infer %2


; start LHS
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i32 = zext %2
%4:i64 = var
%5 = ne %0, %4
%6:i32 = zext %5
%7 = and %3, %6
infer %7


; function: $figure-1b

; start LHS
%0:i64 = var
%1:i64 = var
%2 = slt %0, %1
infer %2


; start LHS
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i64 = var
%4 = slt %1, %3
pc %4 1:i1
infer %2


; start LHS
%0:i64 = var
%1:i64 = var
%2 = ne %0, %1
%3:i64 = var
%4 = slt %3, %1
pc %4 1:i1
infer %2


; start LHS
%0:i64 = var
%1:i64 = var
%2 = eq %0, %1
%3:i32 = zext %2
%4:i64 = var
%5 = ne %0, %4
%6:i32 = zext %5
%7 = and %3, %6
%8 = slt %1, %4
pc %8 1:i1
infer %7


; function: $figure-3-if

; start LHS
%0:i32 = var
%1 = and %0, 1:i32
infer %1


; start LHS
%0:i32 = var
%1 = add %0, 1:i32
%2 = and %0, 1:i32
%3 = ne %2, 0:i32
pc %3 1:i1
infer %1


; start LHS
%0:i32 = var
%1 = add %0, 2:i32
%2 = and %0, 1:i32
%3 = eq %2, 0:i32
pc %3 1:i1
infer %1


; start LHS
%0 = block 2
%1:i32 = var
%2 = and %1, 1:i32
%3 = ne %2, 0:i32
%4 = blockpc %0 0 %3 1:i1
%5 = eq %2, 0:i32
%6 = blockpc %0 1 %5 1:i1
%7 = add %1, 1:i32
%8 = add %1, 2:i32
%9 = phi %0, %7, %8
%10 = and %9, 1:i32
infer %10


; function: $flips

; start LHS
%0 = slt 0:i32, 0:i32
infer %0


; start LHS
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
infer %2


; start LHS
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
%3:i32 = zext %2
%4 = sle 0:i32, %3
infer %4


; start LHS
%0 = slt 0:i32, 0:i32
%1:i32 = zext %0
%2 = ult 0:i32, %1
%3:i32 = zext %2
%4 = sle 0:i32, %3
%5:i32 = zext %4
%6 = ule 0:i32, %5
infer %6


; function: $various-conditions-1

; start LHS
%0:i32 = var
%1 = add %0, 1:i32
%2 = ne %0, 0:i32
pc %2 1:i1
infer %1


; function: $various-conditions-2

; start LHS
%0:i32 = var
%1 = slt %0, 0:i32
infer %1


; start LHS
%0:i32 = var
%1 = sub %0, 2:i32
%2 = slt %0, 0:i32
pc %2 1:i1
infer %1


; function: $various-conditions-3

; function: $various-conditions-4
(module
 (type $0 (func (param i64 i64 i64) (result i32)))
 (type $1 (func (param i32) (result i32)))
 (type $2 (func))
 (type $3 (func (param i32)))
 (func $figure-1a (; 0 ;) (type $0) (param $a i64) (param $x i64) (param $y i64) (result i32)
  (local $i i32)
  (local $j i32)
  (local $r i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (block
   (nop)
   (set_local $i
    (i64.eq
     (get_local $a)
     (get_local $x)
    )
   )
   (nop)
   (nop)
   (set_local $j
    (i64.ne
     (get_local $a)
     (get_local $y)
    )
   )
   (nop)
   (nop)
   (set_local $r
    (i32.and
     (get_local $i)
     (get_local $j)
    )
   )
   (nop)
   (return
    (get_local $r)
   )
   (unreachable)
  )
  (return
   (get_local $9)
  )
 )
 (func $figure-1b (; 1 ;) (type $0) (param $a i64) (param $x i64) (param $y i64) (result i32)
  (local $i i32)
  (local $j i32)
  (local $r i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (block
   (set_local $6
    (i64.lt_s
     (get_local $x)
     (get_local $y)
    )
   )
   (if
    (get_local $6)
    (block
     (block $block
      (nop)
      (set_local $i
       (i64.eq
        (get_local $a)
        (get_local $x)
       )
      )
      (nop)
      (nop)
      (set_local $j
       (i64.ne
        (get_local $a)
        (get_local $y)
       )
      )
      (nop)
      (nop)
      (set_local $r
       (i32.and
        (get_local $i)
        (get_local $j)
       )
      )
      (nop)
      (return
       (get_local $r)
      )
      (unreachable)
     )
     (unreachable)
    )
    (block
     (unreachable)
     (unreachable)
    )
   )
  )
  (unreachable)
 )
 (func $figure-3-if (; 2 ;) (type $1) (param $x i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (block
   (block
    (set_local $1
     (i32.and
      (get_local $x)
      (i32.const 1)
     )
    )
    (if
     (get_local $1)
     (block
      (nop)
      (set_local $x
       (i32.add
        (get_local $x)
        (i32.const 1)
       )
      )
      (nop)
     )
     (block
      (nop)
      (set_local $x
       (i32.add
        (get_local $x)
        (i32.const 2)
       )
      )
      (nop)
     )
    )
   )
   (nop)
   (set_local $4
    (i32.and
     (get_local $x)
     (i32.const 1)
    )
   )
   (return
    (get_local $4)
   )
   (unreachable)
  )
  (return
   (get_local $5)
  )
 )
 (func $flips (; 3 ;) (type $2)
  (local $x i32)
  (local $y i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (block
   (nop)
   (set_local $x
    (i32.ge_s
     (get_local $x)
     (get_local $y)
    )
   )
   (nop)
   (nop)
   (set_local $x
    (i32.ge_u
     (get_local $x)
     (get_local $y)
    )
   )
   (nop)
   (nop)
   (set_local $x
    (i32.gt_s
     (get_local $x)
     (get_local $y)
    )
   )
   (nop)
   (nop)
   (set_local $x
    (i32.gt_u
     (get_local $x)
     (get_local $y)
    )
   )
   (nop)
  )
  (nop)
 )
 (func $various-conditions-1 (; 4 ;) (type $3) (param $x i32)
  (local $1 i32)
  (if
   (get_local $x)
   (block
    (nop)
    (set_local $x
     (i32.add
      (get_local $x)
      (i32.const 1)
     )
    )
    (nop)
   )
  )
  (nop)
 )
 (func $various-conditions-2 (; 5 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (block
   (set_local $1
    (i32.lt_s
     (get_local $x)
     (i32.const 0)
    )
   )
   (if
    (get_local $1)
    (block
     (nop)
     (set_local $x
      (i32.sub
       (get_local $x)
       (i32.const 2)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $various-conditions-3 (; 6 ;) (type $3) (param $x i32)
  (local $1 i32)
  (local $2 i32)
  (block
   (set_local $1
    (i32.eqz
     (i32.const 0)
    )
   )
   (if
    (get_local $1)
    (block
     (nop)
     (set_local $x
      (i32.sub
       (get_local $x)
       (i32.const 4)
      )
     )
     (nop)
    )
   )
  )
  (nop)
 )
 (func $various-conditions-4 (; 7 ;) (type $3) (param $x i32)
  (local $1 i32)
  (block
   (unreachable)
   (if
    (unreachable)
    (block
     (nop)
     (set_local $x
      (i32.add
       (get_local $x)
       (i32.const 3)
      )
     )
     (nop)
    )
   )
  )
  (unreachable)
 )
)
